package test.fomalhaut.pieces

import fomalhaut.BoardSpecialEvents
import fomalhaut.pieces.Pawn

import org.scalatest.FlatSpec

/**
 * @author kniemiec
 */
class PawnTest  extends FlatSpec{
  
  "white pawn from e2  " should " attack to fields d3 and f3" in {
    val pawn = new Pawn(List(12), new BoardSpecialEvents(0,true,true,true,true,0))
    assert(pawn.getAttackedFields(12,Nil,Nil) == List( 19, 21))
  }
  
    "white pawn from e2  " should " can go to e3 only" in {
    val pawn = new Pawn(List(12), new BoardSpecialEvents(0,true,true,true,true,0))
    assert(pawn.getAttackedFields(12,Nil,List(28)) == List( 20))
    //assert(board.whitePiecesPosition == List(new Queen(List(3))))    
  }
  
    "white pawn from e2  " should " attack and go to fields d3,f3,e3 and e4" in {
    val pawn = new Pawn(List(12), new BoardSpecialEvents(0,true,true,true,true,0))
    assert(pawn.getAttackedFields(12,List(19,21),Nil) == List( 20, 28,19,21))
    //assert(board.whitePiecesPosition == List(new Queen(List(3))))    
  }
  
  "white pawn from e3  " should " go to field e4 " in {
    val pawn = new Pawn(List(20), new BoardSpecialEvents(0,true,true,true,true,0))
    assert(pawn.getAttackedFields(20,Nil,Nil) == List( 28))
    //assert(board.whitePiecesPosition == List(new Queen(List(3))))    
  }
  
  "white pawn from e7  " should " go to field e8 and be promoted " in {
    val pawn = new Pawn(List(52), new BoardSpecialEvents(0,true,true,true,true,0))
    assert(pawn.getAttackedFields(52,Nil,Nil) == List( 60,60,60,60))
    //assert(board.whitePiecesPosition == List(new Queen(List(3))))    
  }  

  "black pawn from e3  " should " go to field e2 " in {
    val pawn = new Pawn(List(20), new BoardSpecialEvents(1,true,true,true,true,0))
    assert(pawn.getAttackedFields(20,Nil,Nil) == List( 12))
    //assert(board.whitePiecesPosition == List(new Queen(List(3))))    
  }    

    "black pawn from e3  " should " attack fields e2,d2,f2 " in {
    val pawn = new Pawn(List(20), new BoardSpecialEvents(1,true,true,true,true,0))
    assert(pawn.getAttackedFields(20,List(11,13),Nil) == List( 12,11,13))
    //assert(board.whitePiecesPosition == List(new Queen(List(3))))    
  }   
  
  "black pawn from e2  " should " go to field e1 " in {
    val pawn = new Pawn(List(12), new BoardSpecialEvents(1,true,true,true,true,0))
    assert(pawn.getAttackedFields(12,Nil,Nil) == List( 4,4,4,4))
    //assert(board.whitePiecesPosition == List(new Queen(List(3))))    
  }    
  
  "black pawn from e2  " should " attack and go  to field d1, f1 and e1 " in {
    val pawn = new Pawn(List(12), new BoardSpecialEvents(1,true,true,true,true,0))
    assert(pawn.getAttackedFields(12,List(3,5),Nil) == List( 4,4,4,4,3,3,3,3,5,5,5,5))
    //assert(board.whitePiecesPosition == List(new Queen(List(3))))    
  }    
  
  
}